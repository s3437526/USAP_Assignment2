#!/bin/bash

: "

Script by Alex Alduk S3437526

This script initiates and installs the Linux Kernel for the Raspberry Pi 4

*** TO-DO ***
Install manpage script
Add manpage
Minor aesthetic edits to README.md page
Add manpage to README.md
Document the use of the manpage
Elaborate on some print logs to help with troubleshooting and error messages
Create error log?
Added manual directory and page

"

# Variables
#==========
declare dir
dir="$HOME/tmp"
declare FAILURE=1
#declare SUCCESS=0
declare STUDENT_DIR="$HOME/s3437526_A2"
failed_process=""
declare PRINTF=/usr/bin/printf
declare MKDIR=/bin/mkdir
declare CP=/bin/cp
declare ECHO=/bin/echo
declare SLEEP=/bin/sleep
declare REBOOT=/sbin/reboot
declare GIT=/usr/bin/git
declare TAR=/bin/tar

# Handle any failed processes - this function gets called and is given a
# parameter of the failed process and displays it to the user before exiting
#===============================================================================
function handle_fails () {

	"$PRINTF" "An error was encountered while running the %s$failed_process"
	"$PRINTF" " process.\nExiting..." 
	exit "$result"
}

# Prepare download and working directories - if at any point these processes
# fail, notify the user and exit
#===============================================================================
function setup_directories () {

	# Local variables
	local git_repo="git@github.com:s3437526/USAP_Assignment2.git"

	# Crete temporary clone directory for setup
	# If the directory exists then warn the user to back it up as it would 
	# get deleted on completion of the script
	if [[ -d "$dir" ]] ; then
		"$PRINTF" "\nThe %s""$dir"" directory already exists.\n"
		"$PRINTF" "Please ensure it is backed up as it will be deleted "
		"$PRINTF" "on completion of this process.\nExiting...\n"
		exit "$FAILURE"
	fi	

	# Prepare local directories - if any of these processes fail, notify
	# the user and exit
	"$MKDIR" "$dir" || { "$PRINTF" "Error: creating directory failed.\n" ;
	"$PRINTF" "Directory selected is: %s""$dir"". Exiting..." ;
	exit "$FAILURE" ; }
	
	"$MKDIR" "$STUDENT_DIR" || { "$PRINTF" "Error: creating student\
	       	directory failed.\n" ;
	"$PRINTF" "Directory selected is: %s""$dir"". Exiting..." ;
	exit "$FAILURE" ; }
	
	cd "$dir" || { "$PRINTF" "Error: opening tmp directory failed.\n"
      	"$PRINTF" "Directory selected is: %s""$dir"". Exiting..." ;
       	exit "$FAILURE" ; }

	# Clone the remote repo into the local directory for use - if it fails
	# notify the user
	"$ECHO" "Cloning remote repo to ""$STUDENT_DIR"" directory..."
	if ! "$GIT" clone "$git_repo" "$STUDENT_DIR" ; then
		result="$?"
		failed_process="cloning of remote repository"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."
}

# Download and prepare Linux kernel - report any errors to the user and exit
#===============================================================================
function prepare_kernel () {

	# Local variables
	local boot_dir="/boot"
	local config_file=".config"

	# Download latest linux kernel
	"$ECHO" "Fetching the latest Rasbperry Pi Kernel mirror"
	if ! "$GIT" clone --depth=1 https://github.com/raspberrypi/linux ; then
		result="$?"
		failed_process="remote repository cloning into local directory"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."

	
	# Access build directory
	cd linux || { "$PRINTF" "Error: changing to the linux directory failed."
       	"$PRINTF" "\nExiting..." ; exit "$FAILURE" ; }
	"$ECHO" "Done."

	# Create backup directory for /boot directory in case of failure
	"$ECHO" "Creating backup boot directory..."
	if ! "$MKDIR" "$HOME"/boot_backup ; then
		result="$?"
		failed_process="creating boot backup directory"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."
	
	# Compress and move backup to backup directory
	"$ECHO" "Compressing and moving backup boot directory..."
	if ! "$TAR" -czvf "$HOME"/boot_backup/boot_backup.tar.gz "$boot_dir" ;
	       	then
		result="$?"
		failed_process="backing up and compressing of boot directory"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."


	# Copy .config file to the kernel build directory
	"$ECHO" "Copying $config_file file to the build directory $dir"
	if ! "$CP" "$STUDENT_DIR"/"$config_file" "$config_file" ; then
		result="$?"
		failed_process="copying of the .config file to the build \
			directory"
		handle_fails "$failed_process"
	fi
	cat "$STUDENT_DIR"/"$config_file" >log
	"$ECHO" "Done."
}

# Build and install the Raspberry Pi 4 kernel - notifying the user and exiting
# if any failures occur
#===============================================================================
function install_kernel () {

	"$ECHO" "Installing kernel..."
	if ! sudo make modules_install ; then
		result="$?"
		failed_process="making of the install modules"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done"
	
	if ! sudo "$CP" arch/arm/boot/dts/*.dtb /boot/ ; then
		result="$?"
		failed_process="copying of architecture to boot directory"
		handle_fails "$failed_process"
	fi

	if ! sudo "$CP" arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/ ; then
		result="$?"
		failed_process="copying of architecture to overlays directory"
		handle_fails "$failed_process"
	fi

	if ! sudo "$CP" arch/arm/boot/dts/overlays/README /boot/overlays/ ; then
		result="$?"
		failed_process="copying of architecture to overlays directory"
		handle_fails "$failed_process"
	fi

	"$ECHO" "Copying architecture to Kernel image..."
	if ! sudo "$CP" arch/arm/boot/zImage /boot/"$KERNEL".img ; then
		result="$?"
		failed_process="copying of kernel image to the boot directory"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done"

	# Delete temporary folder
	# "$ECHO" "Deleting temporary folder..."
	# sudo rm -r /home/alx/tmp

	# Run the manual installer script in the /manual directory
	./"$STUDENT_DIR"/manual/install_manual

	"$ECHO" "Kernel installed successfully, restarting in 10 seconds..."
	"$SLEEP" 10
	sudo "$REBOOT"
}

# Install pre-requisites for kernel download
"$ECHO" "Installing dependancies..."
if ! sudo apt install raspberrypi-kernel-headers build-essential bc git wget\
	bison flex libssl-dev make ; then
	result="$?"
	failed_process="installing of dependencies"
	handle_fails "$failed_process"
fi
"$ECHO" "Done."

setup_directories

prepare_kernel

# Set up image to run on 4 cores
"$ECHO" "Setting image to run on 4 cores..."
if ! make -j4 zImage modules dtbs ; then
	result="$?"
	failed_process="setting of the image to run on 4 cores"
	handle_fails "$failed_process"
fi
"$ECHO" "Done."

if ! install_kernel ; then
	result="$?"
	failed_process="installation of the kernel"
	handle_fails "$failed_process"
fi	
