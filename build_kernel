#!/bin/bash

:"

Script by Alex Alduk S3437526

This script initiates and installs the Linux Kernel for the Raspberry Pi 4

*** TO-DO ***

Checkout personal repo
Checkout Raspberry Pi repo
Copy .config file into git repo
Build kernel
Backup /boot directory and compress
Copy files to boot directory
Restart Pi 

No user input??

Input IP address when running script... - check about user input...
Change script group owner to sudo to be able to run without 'sudo' command
remove unneccessary 'sudo' commands
add error checking of calls with the following:
result='$?'
if [[ '$?' -ne '0' ]] ; then
exit '$result' #replace all single quotes with doubles here...
fi

"

#Variables
declare dir
dir="$(pwd)""/tmp" #CHANGE TO ~/tmp
declare inputIP="$1"
declare displayIP="$1:0.0"
declare gitRepo="git@github.com:s3437526/USAP_Assignment2.git"

#*******************************************************************************
#Dummmy test print! - remove!
#*******************************************************************************
printf "Entered IP address is: '%s'""$displayIP""\n"

#Check for input flags - if the first variable (local IP address) is 
#null then exit
function startup_checks () {

	if [[ -z "$inputIP" ]] ; then
		printf "There has been no IP address input.\n"
	       	printf "Please ensure you enter your local IP address before "
		printf "contuniung.\nExiting..."
		exit 1  
	fi
}

# Prepare download and working directories
function setup_directories () {

	#Crete temporary clone directory for setup
	#If the directory exists then warn the user to back it up as it would 
	#get deleted on completion of the script
	if [[ -d "$dir" ]] ; then
		printf "\nThe '%s'$dir directory already exists.\n"
		printf "Please ensure it is backed up as it will be deleted "
		printf "on completion of this process.\nExiting...\n"
		exit 1
	fi	

	mkdir "$dir"
	cd "$dir" || exit 1 # ADD ERROR MESSAGE HERE...............................?
	#mkdir tmp
	#cd tmp

	#Convert directory to git directory
	git init
	git checkout -b Assignment_2 # THINK THIS NEEDS TO BE CLONE, NOT CHECKOUT
}

#Download and prepare Linux kernel
function prepare_kernel () {

	#Download latest linux kernel
	echo "Fetching the latest Rasbperry Pi Kernel mirror"
	git clone --depth=1 https://github.com/raspberrypi/linux

	#Select kernel for Rapberry Pi 4
	echo "Setting Kernel to Rasberry Pi 4"
	KERNEL=kernel7l

	#Set processor type for Raspberry Pi 4
	echo "Making bcm2711_defconfig..."
	cd linux || exit 1 # ERRRRRORRRRRRR MESSAGE HEREEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
	make bcm2711_defconfig
}

#Prepare user interface to allow user to modify kernel features
function setup_ui () {
	
	#Display appropriate message to the user stating the requirements for X
	#and give them time to cancel if this is not set up appropriately
	printf "\nEnsuring X11 screen is exported as localhost. Please ensure "
	printf "X11 is being forwarded otherwise this process will fail.\n"
	printf "Current display is exported as '%s'$displayIP. If this is not "
	printf "the same this process will fail. Be sure to export the correct "
	printf "display with an instance of X server running. \nResuming in 15 "
	printf "seconds...\n"
	sleep 15
	export DISPLAY="$displayIP"

	#Install UI builder
	echo "Installing qt5..."
	sudo apt-get install qt5-\*-dev

	#Build and launch UI - if this process fails display error message and 
	#exit out of the function
	echo "Making Xconfig"
	make xconfig || { printf "There was an error with getting Xconfig "
	printf "running.\nPlease check that you have X11 installed, X11 "
	printf "forwarded and a correct local (client computer) IP address."; 
       	exit 1 ; } # FIX THIS ERROR/EXIT
}

#Build and install the Raspberry Pi 4 kernel
function install_kernel () {

	echo "Installing..."
	sudo make modules_install
	sudo cp arch/arm/boot/dts/*.dtb /boot/ #was sudo
	sudo cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/ #was sudo
	sudo cp arch/arm/boot/dts/overlays/README /boot/overlays/ #was sudo

echo "Copying architecture to Kernel image..."
sudo cp arch/arm/boot/zImage /boot/$KERNEL.img

#Delete temporary folder
#echo "Deleting temporary folder..."
#sudo rm -r /home/alx/tmp

sudo reboot

exit 0
}

startup_checks "$displayIP"

#Install pre-requisites for kernel download
echo "Installing dependancies..."
sudo apt install raspberrypi-kernel-headers build-essential bc git wget bison 
flex libssl-dev make #This was on the same line as above................

setup_directories

prepare_kernel

setup_ui "$displayIP"

#Set up image to run on 4 cores
#echo "Setting image to run on 4 cores..."
#make -j4 zImage modules dtbs #was sudo

#install_kernel
