#!/bin/bash

: "

Script by Alex Alduk S3437526

This script initiates the Linux Kernel .config file creation process
for the Raspberry Pi 4

*** TO-DO ***

"

# Variables
#==========
declare dir
dir="$HOME/tmp"
declare input_IP="$1"
declare display_IP="$1:0.0"
declare FAILURE=1
declare STUDENT_DIR="s3437526"
failed_process=""
declare PRINTF=/usr/bin/printf
declare MKDIR=/bin/mkdir
declare CP=/bin/cp
declare ECHO=/bin/echo
declare SLEEP=/bin/sleep
declare GIT=/usr/bin/git

#*******************************************************************************
#Dummmy test print! - remove!
#*******************************************************************************
"$PRINTF" "Entered IP address is: %s""$display_IP""\n"

# Check for input flags - if the first vari - able (local IP address) is 
# null then exit
#===============================================================================
function startup_checks () {

	if [[ -z "$input_IP" ]] ; then
		"$PRINTF" "There has been no IP address input.\n"
	   	"$PRINTF" "Please ensure you enter your local IP address before"
		"$PRINTF" " continuing.\nExiting..."
		exit "$FAILURE"  
	fi
}

# Handle any failed processes - this function gets called and is given a
# parameter of the failed process and displays it to the user before exiting
#===============================================================================
function handle_fails () {

	"$PRINTF" "An error was encountered while running the \
		%s$failed_process" >>"$LOG" 
	"$PRINTF" " process.\nExiting..." 
	exit "$result"
}

# Prepare download and working directories - if at any point these processes
# fail, notify the user and exit
#===============================================================================
function setup_directories () {

	# Local variables
	local git_repo="git@github.com:s3437526/USAP_Assignment2.git"

	# Crete temporary clone directory for setup
	# If the directory exists then warn the user to back it up as it would 
	# get deleted on completion of the script
	if [[ -d "$dir" ]] ; then
		"$PRINTF" "\nThe %s""$dir"" directory already exists.\n"
		"$PRINTF" "Please ensure it is backed up as it will be deleted "
		"$PRINTF" "on completion of this process.\nExiting...\n"
		exit "$FAILURE"
	fi	

	# Prepare local directories - if any of these processes fail, notify
	# the user and exit
	"$MKDIR" "$dir" || { "$PRINTF" "Error: creating directory failed.\n" ;
	"$PRINTF" "Directory selected is: %s""$dir"". Exiting..." ;
	exit "$FAILURE" ; }

	cd "$dir" || { "$PRINTF" "Error: opening tmp directory failed.\n"
      	"$PRINTF" "Directory selected is: %s""$dir"". Exiting..." ;
       	exit "$FAILURE" ; }

	# Convert directory to git directory - if it fails, notify the user
	"$ECHO" "Initialising local git repository..."
	if ! "$GIT" init ;  then
		result="$?"
		failed_process="Git initialisation"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."

	# Clone the remote repo into the local directory for use - if it fails
	# notify the user
	"$ECHO" "Cloning remote repo to ""$STUDENT_DIR"" directory..."
	if ! "$GIT" clone "$git_repo" "$STUDENT_DIR" ; then
		result="$?"
		failed_process="cloning of remote repository"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."
}

# Download and prepare Linux kernel - report any errors to the user and exit
#===============================================================================
function prepare_kernel () {

	# Local variables
	local config_file=".config"

	# Download latest linux kernel
	"$ECHO" "Fetching the latest Rasbperry Pi Kernel mirror"
	if ! "$GIT" clone --depth=1 https://github.com/raspberrypi/linux ; then
		result="$?"
		failed_process="remote repository cloning into local directory"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."

	# Select kernel for Rapberry Pi 4
	"$ECHO" "Setting Kernel to Rasberry Pi 4"
	if ! KERNEL=kernel7l ; then
		result="$?"
		failed_process="setting of up the Raspberry Pi 4 kernel"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."

	# Set processor type for Raspberry Pi 4
	"$ECHO" "Making bcm2711_defconfig..."
	cd linux || { "$PRINTF" "Error: changing to the linux directory failed."
       	"$PRINTF" "\nExiting..." ; exit "$FAILURE" ; }
	"$ECHO" "Done."

	if ! make bcm2711_defconfig ; then
		result="$?"
		failed_process="making of the bcm2711 kernel configuration"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."
}

# Prepare user interface to allow user to modify kernel features
#===============================================================================
function setup_ui () {
	
	# Display appropriate message to the user stating the requirements for X
	# and give them time to cancel if this is not set up appropriately
	"$PRINTF" "\nEnsuring X11 screen is exported as localhost. Please ensur"
	"$PRINTF" " X11 is being forwarded otherwise this process will fail.\n"
	"$PRINTF" "Current display is exported as %s""$display_IP"". If this is"
	"$PRINTF" " not the same this process will fail. Be sure to export the "
	"$PRINTF" "correct display with an instance of X server running. \n"
	"$PRINTF" "Resuming in 15 seconds...\n"
	"$SLEEP" 15
	export DISPLAY="$display_IP"

	# Install UI builder
	"$ECHO" "Installing qt5..."
	if ! sudo apt-get install qt5-\*-dev ; then
		result="$?"
		failed_process="install section of the qt5"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."

	# Build and launch UI - if this process fails display error message and 
	# exit out of the function
	"$ECHO" "Making Xconfig"
	make xconfig || { "$PRINTF" "There was an error with getting Xconfig "
	"$PRINTF" "running.\nPlease check that you have X11 installed, X11 "
	"$PRINTF" "forwarded and a correct lcal (client computer) IP address."; 
       	exit "$FAILURE" ; }
	"$ECHO" "Done."

	# Copy .config file to the local repo
	"$ECHO" "Copying $config_file file to the local repository $STUDENT_DIR"
	if ! "$CP" "$config_file" "$dir"/"$STUDENT_DIR"/"$config_file" ; then
		result="$?"
		failed_process="copying of the .config file to the git repo"
		handle_fails "$failed_process"
	fi
	"$ECHO" "Done."	
	
	"$ECHO" "Deleting temporary folder..."
        sudo rm -r "$dir"
}

startup_checks "$display_IP"

# Install pre-requisites for kernel download
"$ECHO" "Installing dependancies..."
if ! sudo apt install raspberrypi-kernel-headers build-essential bc git \
	wget bison flex libssl-dev make ; then
	result="$?"
	failed_process="installing of depencencies"
	handle_fails "$failed_process"
fi
"$ECHO" "Done."

setup_directories

prepare_kernel

setup_ui "$display_IP"


# Set up image to run on 4 cores
"$ECHO" "Setting image to run on 4 cores..."
if ! make -j4 zImage modules dtbs ; then #was sudo
	result="$?"
	failed_process="setting of the image to run on 4 cores"
	handle_fails "$failed_process"
fi
"$ECHO" "Done."
